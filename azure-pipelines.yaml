name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise comment out the line below.
pool: myAgentPool

variables:
  python.version: "3.7.6"
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: "myServiceConnection"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "test"

stages:
  # - stage: Build
  #   jobs:
  #     - job: BuildInfrastructure
  #       steps:
  #         # Install Terraform on the pipeline agent
  #         - task: TerraformInstaller@1
  #           displayName: "Terrafom installation"
  #           inputs:
  #             terraformVersion: 'latest'

  #         - script: |
  #             echo $(System.DefaultWorkingDirectory)
  #           displayName: "Show working directory"

  #         - task: TerraformTaskV4@4
  #           displayName: Terraform init
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #             backendServiceArm: 'myServiceConnection'
  #             backendAzureRmResourceGroupName: 'Azuredevops'
  #             backendAzureRmStorageAccountName: 'samistrgname'
  #             backendAzureRmContainerName: 'tfstate'
  #             backendAzureRmKey: $(account_key)
  #         - task: TerraformTaskV4@4
  #           displayName: Terraform validate
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'validate'
  #         - task: TerraformTaskV4@4
  #           displayName: Terraform plan
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'plan'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #             environmentServiceNameAzureRM: 'myServiceConnection'
  #         - task: TerraformTaskV4@4
  #           displayName: Terraform apply
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             commandOptions: '-auto-approve'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #             environmentServiceNameAzureRM: 'myServiceConnection'

  - stage: IntegrationTests
    displayName: Integration Tests
    jobs:
      - job: NewmanTests
        steps:
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: |
                sudo apt update
                sudo apt install nodejs npm -y
                sudo nodejs --version
                sudo npm install -g newman
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: newman run StarterAPIs.json
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
  
  # - stage: PerformanceTests
  #   displayName: Performance Tests
  #   jobs:
  #     - job: JMeterTest
  #       steps: